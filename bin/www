#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('automatecrypto:server');
var http = require('http');
const { response } = require('../app');
const axios = require('axios').default;
var instance;
var latestPrice = 0, previousPrice, holdings = 1000, shares = 0, new_shares;
var holding = false;
var crypto = require('crypto');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function setUp(){
  instance = axios.create({
    baseURL : 'https://api.wazirx.com'
  });
  instance.defaults.headers.common['X-Api-Key'] = 'ESChpdnReZBn8Y83qknVVzHBUaAGkGKvWRF0ywuRGe3eq6hQ2lxcBE5inNyN8kHY';
 }

function displayValues(){
  instance.get('sapi/v1/tickers/24hr').then(function (response){
    console.log(response);
  });
}

function completeTrade(){
  instance.get('sapi/v1/ticker/24hr?symbol=shibinr').then(function (response){
    previousPrice = latestPrice
    latestPrice = response.data.askPrice;
    if((latestPrice < previousPrice) & holding){
      //Sell Action
      holdings = holdings + shares*latestPrice;
      console.log("Sold "+shares + "shares, at Price: " + latestPrice + " Current Holdings : "+holdings);
      holding = false;
      shares = 0;
    }
    else if(latestPrice < previousPrice ){
      // Do nothing
      console.log("Shares Held : "+shares + " Current Holdings : "+holdings + " Latest price : "+ latestPrice);
    }
    else if((latestPrice > previousPrice) & holding){
      // Do Nothing
      console.log("Shares Held : "+shares + " Current Holdings : "+holdings + " Latest price : "+ latestPrice);
    }
    else if(latestPrice > previousPrice){
      //Buy Action
       new_shares = Math.floor(holdings/latestPrice); 
       holdings -= new_shares*latestPrice;
       shares = shares + new_shares;
       console.log("Bought "+new_shares + " shares, at the price : "+latestPrice + " Current Holdings : "+holdings);
       new_shares = 0;
       holding = true;
      }
  });
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  setUp();
//  displayValues();
  completeTrade();
  setInterval(completeTrade, 60000);
}
